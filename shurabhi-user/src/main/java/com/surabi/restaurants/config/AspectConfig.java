package com.surabi.restaurants.config;

import com.surabi.restaurants.entity.AuditLog;
import com.surabi.restaurants.repository.AuditRepository;
import com.surabi.restaurants.serviceimpl.UserLoggedDetailsImpl;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

import java.util.Date;

@Aspect
@Configuration
public class AspectConfig {

    @Autowired
    AuditRepository auditRepository;

	/*@Around("execution(public * com.surabi.restaurants.serviceimpl.*.*(..) )")
	public void logBeforeAndAfterAllMethods(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
		log.info(proceedingJoinPoint.getSignature().getName() + " Started");
		proceedingJoinPoint.proceed();
		log.info(proceedingJoinPoint.getSignature().getName() + " Ended");
	}*/

    @AfterReturning("execution(public * com.surabi.restaurants.serviceimpl.RestaurantServiceImpl.checkOut(..) )")
    public void logBeforeAddBill(JoinPoint joinPoint) {
        auditRepository.saveAndFlush(new AuditLog(new Date(), "Bill " + joinPoint.getArgs()[0] + " generated by User", UserLoggedDetailsImpl.getMyDetails()));
    }

    @AfterReturning("execution(public * com.surabi.restaurants.serviceimpl.AdminServiceImpl.CreateUser(..) )")
    public void logBeforeAddUser() {
        auditRepository.saveAndFlush(new AuditLog(new Date(), "Created user by admin ", UserLoggedDetailsImpl.getMyDetails()));}


    @AfterReturning("execution(public * com.surabi.restaurants.serviceimpl.AdminServiceImpl.deleteUser(..) )")
    public void logBeforeDeteleUser() {
        auditRepository.saveAndFlush(new AuditLog(new Date(), "Deleted user by admin ", UserLoggedDetailsImpl.getMyDetails()));}


    @AfterReturning("execution(public * com.surabi.restaurants.serviceimpl.AdminServiceImpl.UpdateUser(..) )")
    public void logBeforeUpdateUser() {
        auditRepository.saveAndFlush(new AuditLog(new Date(), "Updated user by admin ", UserLoggedDetailsImpl.getMyDetails()));}


/*	@AfterReturning("execution(public * com.surabi.restaurants.serviceimpl.UserServiceImpl.save(..) )")
	public void logBeforeAddUserReg(JoinPoint joinPoint) {
		auditRepository.saveAndFlush(AuditLog.builder().createDate(new Date()).user(UserLoggedDetailsImpl.getMyDetails())
				.discription("User added using registration ").build());
	}*/
}
